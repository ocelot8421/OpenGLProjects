itt járok:


-- How to install OpenGL for C++ (Windows)                          https://www.youtube.com/watch?v=hRInLNR9iRg
    cd bin -- ne felejts el belépni a bin-be
    mingw32-make
    .\main.exe -- ne felejtsd el a szülőmappát is hozzácsapni a path-hoz

-- missing separator                                                https://www.youtube.com/watch?v=2nM6DBE0blA
bin> mingw32-make
Makefile:2: *** missing separator.  Stop.
Solved: View/Command Palette --> Convert Indentation  to tabs

-- magnitude                                                        Michael Grieco -- https://www.youtube.com/watch?v=bQ3CPgw4lxY&list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&index=2
magnitude ||u|| = "length"

-- Homogeneous Coordinate example                                   https://www.tomdalling.com/blog/modern-opengl/explaining-homogenous-coordinates-and-projective-geometry/

-- glViewport(0, 0, 900, 600)                                       learnopengl -- https://learnopengl.com/Getting-started/Hello-Window
2d képszintézis                                                     Laszlo Szirmay-Kalos - 2d képszintézis                      -- https://www.youtube.com/watch?v=-fX0UT2umIM&list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&index=15
                                                                                         - 0. Számítógépes grafika: Bevezetés   -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=1558

-- Translation, Rotation, Scaling matrix
#include <iostream>
#include <iomanip>
void printVector (int i, glm::vec4 vector);
void printMatrix (int i, int j, glm::mat4 matrix, std::string title);
//GLM test
//	glm::vec4 vec(1.0f, 0.0f, 0.0f, 1.0f);						
//	std::cout << "vec: " << std::endl;
//	printVector(4, vec);
//	glm::mat4 trans = glm::mat4(1.0f); 							
//	trans = glm::translate(trans, glm::vec3(1.0f, 1.0f, 0.0f)); 						
//    trans = glm::rotate(trans, glm::radians(90.0f), glm::vec3(0.0, 0.0, 1.0));
//	trans = glm::scale(trans, glm::vec3(0.5, 0.5, 0.5));
//	printMatrix(4, 4, trans, "trans: ");
//	vec = trans * vec;											
//	std::cout << "trans * vec: " << std::endl;
//	printVector(4, vec);
void printMatrix (int i, int j, glm::mat4 matrix, std::string title){
std::cout << title << std::endl;
	for (int i = 0; i < 4; i++){
		printVector(4, matrix[i]);
    }
}
void printVector (int i, glm::vec4 vector){
    for (int j = 0; j < 4; j++){
	    std::cout << std::setw(12) << vector[j] << ' ';
    }
	std::cout << std::endl;
}

 -- Vertex shader (Csúcspontárnyaló shader)                 Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=489
                                                            Laszlo Szirmay-Kalos -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=869
                                                            learnopengl.com -- https://learnopengl.com/Getting-started/Hello-Triangle#:~:text=start%20building%20those.-,Vertex%20shader,-The%20vertex%20shader

-   if(aPos.x < 0.0){                                       learnopengl.com -- https://learnopengl.com/Getting-started/Shaders#:~:text=float%20vertices%5B%5D%20%3D%20%7B%0A%20%20%20%20//%20positions%20%20%20%20%20%20%20%20%20//%20colors%0A%20%20%20%20%200.5f%2C%20%2D0.5f%2C%200.0f%2C%20%201.0f%2C%200.0f%2C%200.0f%2C%20%20%20//%20bottom%20right%0A%20%20%20%20%2D0.5f%2C%20%2D0.5f%2C%200.0f%2C%20%200.0f%2C%201.0f%2C%200.0f%2C%20%20%20//%20bottom%20left%0A%20%20%20%20%200.0f%2C%20%200.5f%2C%200.0f%2C%20%200.0f%2C%200.0f%2C%201.0f%20%20%20%20//%20top%20%0A%7D%3B                                      
        color = vec4(1.0, 0.0, 0.0, 1.0);
    } else if(aPos.x == 0){
        color = vec4(0.0, 1.0, 0.0, 1.0);
    } else {
        color = vec4(0.0, 0.0, 1.0, 1.0);       
    }
. fragment interpolation                                    learningopengl -- https://learnopengl.com/Getting-started/Shaders#:~:text=of%20something%20called-,fragment%20interpolation,-in%20the%20fragment

-- Fragment shader / Pixel shader                           Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=569
                                                            Laszlo Szirmay-Kalos -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=1006
                                                            learnopengl.com -- https://learnopengl.com/Getting-started/Hello-Triangle#:~:text=is%20now%20compiled.-,Fragment%20shader,-The%20fragment%20shader

-- CPU init                                                 Laszlo Szirmay-Kalos -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=1151
                                                            Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=1658
- VAO, VBO
vao - vertex array object, vbo - vertex buffer object       Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=1544
- float vtx[] =  = {
		-0.5f, -0.5f, 0.0f,
		0.0f, 0.5f, 0.0f,
		0.5f, -0.5f, 0.0f
	};
. NDC - normalized device coordinates                       Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=1795
                                                            learnopengl.com -- https://learnopengl.com/Getting-started/Hello-Triangle#:~:text=like%20it%27s%202D.-,Normalized%20Device%20Coordinates%20(NDC),-Once%20your%20vertex

- glVertexAttribPointer                                     Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=2008
                                                            Laszlo Szirmay-Kalos -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=1351

-- CPU draw                                                 Laszlo Szirmay-Kalos -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=1377
                                                            Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=2317

--uniform változók
- MVP: model, view, projection (vertex shader)              Laszlo Szirmay-Kalos -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=1412
- color (fragment shader)

-- triangle finished                                        Michael Grieco - C++ OpenGL Tutorial - 7 - Displaying Shapes -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=2468
                                                            Laszlo Szirmay-Kalos -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=742

-- drawElement                                              Michael Grieco -- https://youtu.be/4JAwK4lzrF8?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=2893
- EBO element buffer object

-- uniform                                                  Michael Grieco - C++ OpenGL Tutorial - 8 - Shaders/Transformations -- https://youtu.be/jdYVnwEPNEU?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=819
- glUniformMatrix4fv                                                                                                              https://youtu.be/jdYVnwEPNEU?list=PLysLvOneEETPlOI_PI4mJnocqIpr2cSHS&t=1142

-- kvarternió: komplex számok 4D-ben
-- duális számok: "komplex számok testvérkéje"              Laszlo Szirmay-Kalos - 0. Számítógépes grafika: Bevezetés -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=1971              
-- baricentrikus koordinátarendszer                         Laszlo Szirmay-Kalos - 0. Számítógépes grafika: Bevezetés -- https://youtu.be/enFszxj6hfA?list=PLiH4g_VR3i0Pz0vAyjPzPCXDqLqHPfW2p&t=2080
-- Babbage mechanikus számológépe                           https://tig.kgk.uni-obuda.hu/vir/anyag/sztch_tort/Babbage.html


# GLAD  = openGl LoAder Generator       library that generates and manages the function pointers for OpenGL
# GLFW  = Graphics Library FrameWork    cross-platform, open-source library for creating windows, contexts, and receiving input in OpenGL, Vulkan, and other graphics API applications
# GLM   = openGL Mathematics




